// querydsl
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	// querydsl
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	// asciidoctor for Spring Rest Docs
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.maeng0830'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt // asciidoctor for Spring Rest Docs
}

repositories {
	mavenCentral()
}

dependencies {
	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	// for Spring Rest Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// querydsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

// asciidoctor for Spring Rest Docs
ext {
	// 전역 변수
	// 문서 조각의 경로
	snippetsDir = file('build/generated-snippets')
}

test {
	// 테스트 결과물(문서 조각)을 지정된 경로에 저장
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir // 테스트 결과물(문서 조각)을 사용한다.
	configurations 'asciidoctorExt'

	sources {
		include("**/index.adoc") // 특정 파일만 html로 만든다.
	}

	baseDirFollowsSourceFile() // 다른 adoc 파일을 include할 때 경로를 baseDir로 맞춘다.
	dependsOn test // test 실행 후, asciidoctor가 실행된다.
}

bootJar {
	dependsOn asciidoctor // asciidoctor 실행 후, bootJar가 실행된다.
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}