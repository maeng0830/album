spring:
  profiles:
    active: dev

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google.client-id}
            client-secret: ${google.client-secret}
            scope:
              - email
              - profile
          naver:
            client-id: ${naver.client-id}
            client-secret: ${naver.client-secret}
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver #네이버는 주소가 고정은 아니다. 그렇지만 표준을 따르자

        provider: # 네이버는 provider가 등록되어있지 않기 때문에 직접 등록해준다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원 정보를 json으로 받으며, 네이버가 response라는 key값으로 리턴해준다.
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: ${dev.url}
    username: ${dev.username}
    password: ${dev.password}
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${prod.url}
    username: ${prod.username}
    password: ${prod.password}
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
---
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: ${test.url}
    username: ${test.username}
    password:
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true