server:
  port: 5000
  servlet:
    encoding:
      charset: utf-8

spring:
  datasource:
    url: jdbc:mariadb://${aws.rds.hostname}:${aws.rds.port}/${aws.rds.db.name}?allowPublicKeyRetrieval=true&useSSL=false
    driver-class-name: org.mariadb.jdbc.Driver
    username: ${aws.rds.username}
    password: ${aws.rds.password}

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MariaDBDialect
        default_batch_fetch_size: 100

  redis:
    host: ${aws.redis.host}
    port: ${aws.redis.port}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google.client-id}
            client-secret: ${google.client-secret}
            scope:
              - email
              - profile
          naver:
            client-id: ${aws.naver.client-id}
            client-secret: ${aws.naver.client-secret}
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${aws.naver.redirect.url} #네이버는 주소가 고정은 아니다. 그렇지만 표준을 따르자

        provider: # 네이버는 provider가 등록되어있지 않기 때문에 직접 등록해준다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원 정보를 json으로 받으며, 네이버가 response라는 key값으로 리턴해준다.

  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100

  messages:
    basename: errors

  thymeleaf:
    prefix: classpath:/templates/

cloud:
  aws:
    s3:
      bucket: ${aws.s3.bucket}
    credentials:
      secret-key: ${aws.credentials.secret-key}
      access-key: ${aws.credentials.access-key}
    region:
      static: ${aws.region.static}
    stack:
      auto: false